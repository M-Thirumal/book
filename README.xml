<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Book</title>
<date>2021-05-26</date>
</info>
<preface>
<title></title>
<literallayout class="monospaced">Doc Writer m.thirumal@hotmail.com</literallayout>

</preface>
<chapter xml:id="_computer_science">
<title>Computer Science</title>
<section xml:id="_aws">
<title>AWS</title>
<section xml:id="_lambda_functions">
<title>Lambda Functions</title>
<section xml:id="_prerequisite_setting_up_your_environment">
<title>Prerequisite: Setting up your environment</title>

</section>
<section xml:id="_invoke_aws_lambda_function_from_another_lambda_function">
<title>Invoke AWS Lambda function from another lambda function</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="img/lambda-Invoke.svg"/>
</imageobject>
<textobject><phrase>lambda Invoke</phrase></textobject>
</mediaobject>
</informalfigure>
<section xml:id="_prerequisite">
<title>Prerequisite</title>
<itemizedlist>
<listitem>
<simpara><literal>IAM role</literal> role to attach below policy to the <literal>invoking</literal> lambda function</simpara>
<itemizedlist>
<listitem>
<simpara><literal>lambda:InvokeFunction</literal>,</simpara>
</listitem>
<listitem>
<simpara><literal>lambda:InvokeAsync</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_steps">
<title>Steps</title>
<itemizedlist>
<listitem>
<simpara>Create invoker lambda function</simpara>
<itemizedlist>
<listitem>
<simpara>Attach <literal>IAM</literal> policy</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Create lambda function for invoking</simpara>
</listitem>
<listitem>
<simpara>Test it</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_sample_code_with_aws_chalice_fraework">
<title>Sample code with AWS Chalice fraework</title>
<formalpara>
<title>Saple code to invoke another lambda function</title>
<para>
<programlisting language="python" linenumbering="unnumbered">from chalice import Chalice

import logging
import boto3

app = Chalice(app_name='lambda-invoker')

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# Define the client to interact with AWS Lambda
client = boto3.client('lambda')

@app.on_kinesis_record(stream=os.environ.get('kinesisStreamName'))
def handler(event):
    logger.debug("Received event {}".format(event))
     #Invoke Lambda
    client.invoke(
        FunctionName = "arn:aws:lambda:ca-central-1:047076321700:function:eballot-pollBetaStack-Handler-N3Z7PX8BK9PE",
        InvocationType = "Event",
        Payload = event
        )
    return</programlisting>
</para>
</formalpara>
</section>
</section>
</section>
<section xml:id="_dynamodb">
<title>DynamoDb</title>
<section xml:id="_dynamodb_to_kinesis_stream">
<title>DynamoDb to Kinesis Stream</title>
<itemizedlist>
<listitem>
<simpara>Create kinesis stream</simpara>
</listitem>
<listitem>
<simpara>select the kinesis stream in Dynamodb table overview</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section xml:id="_linux">
<title>Linux</title>

</section>
<section xml:id="_installupdate_visual_studio_code_in_ubuntu">
<title>Install/update Visual studio code in Ubuntu</title>
<screen>sudo dpkg -r code
sudo dpkg -i code_1.56.2-1620838498_amd64.deb</screen>
</section>
<section xml:id="_pagination">
<title>Pagination</title>
<section xml:id="_pagination_2">
<title>Pagination</title>
<simpara>Pagination is a sequence of pages which are connected and have similar content</simpara>
<simpara><emphasis>Page</emphasis> is a fixed count of results or fixed size of results</simpara>
<simpara>Client application may request to skip multiple page and fetch the following page</simpara>
<itemizedlist mark="disc">
<title>Keywords</title>
<listitem>
<simpara>LIMIT,</simpara>
<itemizedlist>
<listitem>
<simpara><literal>"LIMIT"</literal> as itâ€™s name suggests, limits the number of rows returned in a SELECT query</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>OFFSET,</simpara>
</listitem>
<listitem>
<simpara>ORDER BY</simpara>
</listitem>
<listitem>
<simpara>Pagination</simpara>
</listitem>
</itemizedlist>
<section xml:id="_thinks_that_are_need_to_be_handled">
<title>Thinks that are need to be handled</title>
<itemizedlist>
<listitem>
<simpara>Skiping page</simpara>
</listitem>
<listitem>
<simpara>Fetch based on the page &amp; limit</simpara>
</listitem>
</itemizedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="img/limit_offset.png" contentwidth="100" contentdepth="100"/>
</imageobject>
<textobject><phrase>Limit offset example</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_types_of_pagination">
<title>Types of Pagination</title>
<itemizedlist mark="disc">
<listitem>
<simpara>Offset-based Pagination</simpara>
</listitem>
<listitem>
<simpara>Token-based Pagination</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_offset_based_pagination">
<title>Offset Based Pagination</title>
<section xml:id="_traverse_forward">
<title>Traverse Forward</title>

</section>
<section xml:id="_traverse_backward">
<title>Traverse backward</title>

</section>
</section>
<section xml:id="_token_based_pagination">
<title>Token Based Pagination</title>
<section xml:id="_traverse_forward_2">
<title>Traverse Forward</title>
<simpara><literal>nextToken</literal> is used to specify the record after which additional items should be fetched, along with the page size.</simpara>
<simpara>The implementation of the token is system-specific.</simpara>
<simpara><literal>DynamoDB</literal> is an example of at system that uses <literal>token-pagination</literal></simpara>
</section>
<section xml:id="_traverse_backward_2">
<title>Traverse backward</title>

</section>
</section>
<section xml:id="_pagination_in_graph">
<title>Pagination in Graph</title>
<simpara>Vertices can be refered directly but when we execute a graph traversal we are effectively conducting a complex join among the vertices that take part in the traversal.</simpara>
<literallayout class="monospaced">In the general case, to support pagination, we need to store some state for each of the participating node and edge, as each of them may contribute to the final output during the computation of the next page.</literallayout>
</section>
</section>
</section>
<section xml:id="_asciidoc">
<title>AsciiDoc</title>
<literallayout class="monospaced">include::asciidoc.adoc[]</literallayout>
</section>
</chapter>
<chapter xml:id="_biology">
<title>Biology</title>
<section xml:id="_botonay">
<title>Botonay</title>
<section xml:id="_inosculation">
<title>Inosculation</title>
<simpara>When branches or roots of different trees are in prolonged intimate contact, they often abrade each other, exposing their inner tissues, which may eventually fuse.</simpara>
<simpara>It&#8217;s not so much one tree feeding another as the formation of a new hybrid organism.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="img/inosculation.png" align="center"/>
</imageobject>
<textobject><phrase>inosculation</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
</chapter>
</book>